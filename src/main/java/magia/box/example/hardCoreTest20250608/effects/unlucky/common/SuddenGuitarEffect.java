package magia.box.example.hardCoreTest20250608.effects.unlucky.common;

import magia.box.example.hardCoreTest20250608.effects.EffectRarity;
import magia.box.example.hardCoreTest20250608.effects.EffectType;
import magia.box.example.hardCoreTest20250608.effects.base.UnluckyEffectBase;
import magia.box.example.hardCoreTest20250608.effects.core.EffectRegistration;
import org.bukkit.ChatColor;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.player.*;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

@EffectRegistration(
    id = "sudden_guitar",
    type = EffectType.UNLUCKY,
    rarity = EffectRarity.COMMON
)
public class SuddenGuitarEffect extends UnluckyEffectBase implements Listener {
    
    private static final Set<UUID> affectedPlayers = new HashSet<>();
    private static final long EFFECT_DURATION = 600L; // 30ÁßíÈñì
    private final Random random = new Random();
    
    // „ÇÆ„Çø„ÉºÈü≥ÈöéÔºàNote Block‰ΩøÁî®Ôºâ
    private static final float[] GUITAR_NOTES = {
        0.5f,   // F
        0.53f,  // F#
        0.56f,  // G
        0.6f,   // G#
        0.63f,  // A
        0.67f,  // A#
        0.7f,   // B
        0.75f,  // C
        0.8f,   // C#
        0.85f,  // D
        0.9f,   // D#
        0.95f,  // E
        1.0f,   // F („Ç™„ÇØ„Çø„Éº„Éñ‰∏ä)
        1.05f,  // F#
        1.1f,   // G
        1.2f,   // G#
        1.26f,  // A
        1.33f,  // A#
        1.4f,   // B
        1.5f,   // C („Ç™„ÇØ„Çø„Éº„Éñ‰∏ä)
        1.6f,   // C#
        1.7f,   // D
        1.8f,   // D#
        1.9f,   // E
        2.0f    // F (2„Ç™„ÇØ„Çø„Éº„Éñ‰∏ä)
    };

    public SuddenGuitarEffect(JavaPlugin plugin) {
        super(plugin, "Á™ÅÁÑ∂„ÅÆ„ÇÆ„Çø„Éº", EffectRarity.COMMON);
    }

    @Override
    public String apply(Player player) {
        UUID playerId = player.getUniqueId();
        
        if (affectedPlayers.contains(playerId)) {
            player.sendMessage(ChatColor.YELLOW + "üé∏ Êó¢„Å´Á™ÅÁÑ∂„ÅÆ„ÇÆ„Çø„Éº„ÅÆÂΩ±Èüø„ÇíÂèó„Åë„Å¶„ÅÑ„Åæ„Åô„ÄÇ");
            return getDescription();
        }
        
        affectedPlayers.add(playerId);
        
        // „É™„Çπ„Éä„Éº„ÇíÁôªÈå≤
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        
        player.sendMessage(ChatColor.RED + "üé∏ Á™ÅÁÑ∂„ÅÆ„ÇÆ„Çø„ÉºÁóáÂÄôÁæ§„ÅåÁô∫Áóá„Åó„Åæ„Åó„ÅüÔºÅ„ÅÇ„Å™„Åü„ÅÆË°åÂãï„ÅåÂÖ®„Å¶„ÇÆ„Çø„ÉºÈü≥Ê•Ω„Å´„Å™„Çä„Åæ„ÅôÔºÅ");
        player.sendMessage(ChatColor.GRAY + "‚ô™ ‚ô´ ‚ô™ Let's Rock & Roll! ‚ô™ ‚ô´ ‚ô™");
        
        // ÈñãÂßãÊôÇ„ÅÆ„ÇÆ„Çø„Éº„Ç§„É≥„Éà„É≠
        playGuitarIntro(player);
        
        // ÂÆöÊúüÁöÑ„Å´„É©„É≥„ÉÄ„É†„ÇÆ„Çø„ÉºÈü≥Ôºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Éü„É•„Éº„Ç∏„ÉÉ„ÇØÁöÑ„Å™Ôºâ
        new BukkitRunnable() {
            private int count = 0;
            
            @Override
            public void run() {
                if (!affectedPlayers.contains(playerId) || !player.isOnline() || count >= 30) {
                    this.cancel();
                    return;
                }
                
                // 30%„ÅÆÁ¢∫Áéá„Åß„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÇÆ„Çø„ÉºÈü≥
                if (random.nextInt(10) < 3) {
                    playRandomGuitarChord(player);
                }
                
                // 10Áßí„Åî„Å®„Å´„É≠„ÉÉ„ÇØ„É°„ÉÉ„Çª„Éº„Ç∏
                if (count % 10 == 0) {
                    showRockMessage(player);
                }
                
                count++;
            }
        }.runTaskTimer(plugin, 20L, 20L); // 1ÁßíÈñìÈöî
        
        // 30ÁßíÂæå„Å´ÂäπÊûú„ÇíËß£Èô§
        new BukkitRunnable() {
            @Override
            public void run() {
                removeEffect(player);
            }
        }.runTaskLater(plugin, EFFECT_DURATION);
        
        return getDescription();
    }
    
    private void removeEffect(Player player) {
        UUID playerId = player.getUniqueId();
        affectedPlayers.remove(playerId);
        
        if (player.isOnline()) {
            player.sendMessage(ChatColor.GREEN + "üéµ „ÇÆ„Çø„ÉºÁóáÂÄôÁæ§„ÅåÊ≤ªÁôí„Åó„Åæ„Åó„Åü„ÄÇÈùôÂØÇ„ÅåÊàª„Å£„Å¶„Åç„Åæ„Åó„Åü...");
            player.sendMessage(ChatColor.GRAY + "‚ô™ Thank you for listening! ‚ô™");
            
            // ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇÆ„Çø„Éº„Ç¢„Ç¶„Éà„É≠
            playGuitarOutro(player);
        }
        
        // ÂΩ±Èüø„ÇíÂèó„Åë„Å¶„ÅÑ„Çã„Éó„É¨„Ç§„É§„Éº„Åå„ÅÑ„Å™„Åè„Å™„Å£„Åü„Çâ„É™„Çπ„Éä„Éº„ÇíËß£Èô§
        if (affectedPlayers.isEmpty()) {
            HandlerList.unregisterAll(this);
        }
    }
    
    private void playGuitarIntro(Player player) {
        // ÈñãÂßãÊôÇ„ÅÆ„ÇÆ„Çø„Éº„É™„Éï
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[7], 1.0f), 5L); // C
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[9], 1.0f), 10L); // D
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[12], 1.0f), 15L); // F
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[14], 1.0f), 20L); // G
    }
    
    private void playGuitarOutro(Player player) {
        // ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇÆ„Çø„Éº„Ç¢„Ç¶„Éà„É≠
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[14], 1.0f), 5L); // G
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[12], 1.0f), 10L); // F
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[9], 1.0f), 15L); // D
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[7], 0.8f), 25L); // C („Éï„Çß„Éº„Éâ„Ç¢„Ç¶„Éà)
    }
    
    private void playGuitarNote(Player player, float pitch, float volume) {
        if (player.isOnline()) {
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_GUITAR, volume, pitch);
        }
    }
    
    private void playRandomGuitarChord(Player player) {
        // „É©„É≥„ÉÄ„É†„Å™ÂíåÈü≥„ÇíÊºîÂ•è
        float rootNote = GUITAR_NOTES[random.nextInt(12)]; // „É´„Éº„ÉàÈü≥
        
        playGuitarNote(player, rootNote, 0.6f);
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, rootNote * 1.25f, 0.5f), 2L); // 3Â∫¶
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, rootNote * 1.5f, 0.4f), 4L); // 5Â∫¶
    }
    
    private void showRockMessage(Player player) {
        String[] rockMessages = {
            "üé∏ Rock on! ü§ò",
            "üéµ Keep on rockin'! üé∂",
            "üé∏ Guitar Hero mode! üåü",
            "ü§ò Heavy Metal! ü§ò",
            "üé∂ Music to my ears! üéµ",
            "üé∏ Shred it! üî•"
        };
        
        String message = rockMessages[random.nextInt(rockMessages.length)];
        player.sendMessage(ChatColor.GOLD + message);
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        // ÁßªÂãï„Å´Âøú„Åò„Å¶„ÇÆ„Çø„ÉºÈü≥ÔºàÊ≠©Ë°å„ÅØ‰ΩéÈü≥„ÄÅËµ∞Ë°å„ÅØÈ´òÈü≥Ôºâ
        if (event.getTo() == null) return;
        double distance = event.getFrom().distance(event.getTo());
        
        if (distance > 0.1) { // ÂÆüÈöõ„Å´ÁßªÂãï„Åó„ÅüÂ†¥Âêà
            // „Ç∏„É£„É≥„Éó„ÇíÊ§úÂá∫ÔºàYÂ∫ßÊ®ô„Åå‰∏äÊòá„Åó„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
            if (event.getTo().getY() > event.getFrom().getY() + 0.1) {
                handleJump(player);
            } else if (player.isSprinting()) {
                // Ëµ∞Ë°å - È´òÈü≥„ÅßÈÄü„ÅÑ„ÉÜ„É≥„Éù
                if (random.nextInt(3) == 0) { // 33%„ÅÆÁ¢∫Áéá
                    int noteIndex = Math.min(15 + random.nextInt(8), GUITAR_NOTES.length - 1);
                    playGuitarNote(player, GUITAR_NOTES[noteIndex], 0.7f);
                }
            } else {
                // Ê≠©Ë°å - ‰ΩéÈü≥„Åß„ÇÜ„Å£„Åü„Çä
                if (random.nextInt(5) == 0) { // 20%„ÅÆÁ¢∫Áéá
                    playGuitarNote(player, GUITAR_NOTES[random.nextInt(10)], 0.5f);
                }
            }
        }
    }
    
    // PlayerJumpEvent„ÅØÂ≠òÂú®„Åó„Å™„ÅÑ„Åü„ÇÅ„ÄÅÁßªÂãï„Ç§„Éô„É≥„Éà„Åß„Ç∏„É£„É≥„Éó„ÇíÊ§úÂá∫
    private void handleJump(Player player) {
        // „Ç∏„É£„É≥„Éó - ‰∏äÊòáÈü≥Èöé
        playGuitarNote(player, GUITAR_NOTES[7], 0.8f); // C
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[11], 0.7f), 3L); // E
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[14], 0.6f), 6L); // G
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onBlockBreak(BlockBreakEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        // „Éñ„É≠„ÉÉ„ÇØÁ†¥Â£ä - „Éë„ÉØ„Éº„Ç≥„Éº„Éâ
        float rootNote = GUITAR_NOTES[random.nextInt(8)];
        playGuitarNote(player, rootNote, 1.0f);
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, rootNote * 1.5f, 0.8f), 2L);
        
        player.sendMessage(ChatColor.YELLOW + "üé∏ Á†¥Â£ä„ÅÆ„É™„ÉïÔºÅ");
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerInteract(PlayerInteractEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        // „Ç¢„Ç§„ÉÜ„É†‰ΩøÁî® - „Ç¢„É´„Éö„Ç∏„Ç™
        if (event.getAction().toString().contains("RIGHT_CLICK")) {
            float startNote = GUITAR_NOTES[random.nextInt(8)];
            for (int i = 0; i < 4; i++) {
                final int index = i;
                plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
                    playGuitarNote(player, startNote * (1 + index * 0.2f), 0.6f - index * 0.1f), i * 2L);
            }
        } else if (event.getAction().toString().contains("LEFT_CLICK")) {
            // Â∑¶„ÇØ„É™„ÉÉ„ÇØ - „Çπ„Éà„É≠„Éº„ÇØ
            playGuitarNote(player, GUITAR_NOTES[12], 0.9f);
        }
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerToggleSneak(PlayerToggleSneakEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        if (event.isSneaking()) {
            // „Çπ„Éã„Éº„ÇØÈñãÂßã - ‰∏ãÈôçÈü≥Èöé
            playGuitarNote(player, GUITAR_NOTES[14], 0.7f); // G
            plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
                playGuitarNote(player, GUITAR_NOTES[11], 0.6f), 3L); // E
            plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
                playGuitarNote(player, GUITAR_NOTES[7], 0.5f), 6L); // C
        } else {
            // „Çπ„Éã„Éº„ÇØÁµÇ‰∫Ü - ‰∏äÊòáÈü≥Èöé
            playGuitarNote(player, GUITAR_NOTES[7], 0.5f); // C
            plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
                playGuitarNote(player, GUITAR_NOTES[11], 0.6f), 3L); // E
        }
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onItemHeldChange(PlayerItemHeldEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        // „Ç¢„Ç§„ÉÜ„É†Âàá„ÇäÊõø„Åà - „Éô„É≥„ÉâÈü≥
        int noteIndex = Math.min(8 + (event.getNewSlot() % 8), GUITAR_NOTES.length - 1);
        float note = GUITAR_NOTES[noteIndex];
        playGuitarNote(player, note * 0.9f, 0.6f);
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, note, 0.7f), 3L);
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        Player player = event.getPlayer();
        
        if (!affectedPlayers.contains(player.getUniqueId())) {
            return;
        }
        
        // „Ç¢„Ç§„ÉÜ„É†„Éâ„É≠„ÉÉ„Éó - ËêΩ‰∏ãÈü≥
        int highNote = Math.min(16, GUITAR_NOTES.length - 1);
        playGuitarNote(player, GUITAR_NOTES[highNote], 0.8f); // È´òÈü≥„Åã„Çâ
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[12], 0.6f), 4L); // ‰ΩéÈü≥„Å∏
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> 
            playGuitarNote(player, GUITAR_NOTES[7], 0.4f), 8L); // „Åï„Çâ„Å´‰ΩéÈü≥„Å∏
    }
}