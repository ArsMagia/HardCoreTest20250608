name: 🚀 Automatic Deployment Pipeline

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  JAVA_VERSION: '21'
  ARTIFACT_NAME: 'hardcore-plugin'

jobs:
  # =============================================================================
  # Stage 1: Pre-deployment Validation
  # =============================================================================
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      deployment-env: ${{ steps.validation.outputs.deployment-env }}
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Validate deployment conditions
      id: validation
      run: |
        # Check if this is a hotfix or release
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "deployment-env=production" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "deployment-env=staging" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "deployment-env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

    - name: 📊 Check deployment readiness
      if: steps.validation.outputs.should-deploy == 'true'
      run: |
        echo "🔍 Checking deployment readiness..."
        
        # Check for breaking changes
        if git log --oneline -10 | grep -i "BREAKING"; then
          echo "⚠️ Breaking changes detected - manual approval required"
        fi
        
        # Check commit message for deployment hints
        LAST_COMMIT=$(git log --format="%s" -n 1)
        if echo "$LAST_COMMIT" | grep -i "skip.*deploy\|no.*deploy"; then
          echo "🚫 Deployment skipped by commit message"
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # =============================================================================
  # Stage 2: Build and Package
  # =============================================================================
  build-for-deployment:
    name: 🏗️ Build for Deployment
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: 🔧 Build optimized JAR
      run: |
        mvn clean package -P production \
          -DskipTests=false \
          -Dmaven.javadoc.skip=true \
          -B

    - name: 🏷️ Generate deployment metadata
      run: |
        echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
        echo "GIT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    - name: 📋 Create deployment manifest
      run: |
        cat > deployment-manifest.json << EOF
        {
          "version": "${{ env.VERSION }}",
          "build_time": "${{ env.BUILD_TIME }}",
          "git_sha": "${{ env.GIT_SHA }}",
          "environment": "${{ needs.pre-deployment-validation.outputs.deployment-env }}",
          "java_version": "${{ env.JAVA_VERSION }}",
          "artifact_name": "${{ env.ARTIFACT_NAME }}"
        }
        EOF

    - name: 📦 Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ env.GIT_SHA }}
        path: |
          target/*.jar
          deployment-manifest.json

  # =============================================================================
  # Stage 3: Staging Deployment
  # =============================================================================
  deploy-to-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-for-deployment]
    if: contains(fromJson('["staging", "production"]'), needs.pre-deployment-validation.outputs.deployment-env)
    environment: staging
    steps:
    - name: 📥 Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package-${{ github.sha:0:8 }}

    - name: 🔧 Deploy to staging server
      run: |
        echo "🧪 Deploying to staging environment..."
        
        # Here you would implement actual deployment logic
        # Examples:
        # - Upload JAR to staging server
        # - Restart staging Minecraft server
        # - Update configuration files
        
        # Simulated deployment for now
        echo "✅ Staging deployment completed"
        echo "📍 Staging URL: https://staging.yourserver.com"

    - name: 🔄 Run staging smoke tests
      run: |
        echo "🔄 Running smoke tests on staging..."
        
        # Basic connectivity test
        # Plugin load test
        # Core functionality test
        
        echo "✅ Smoke tests passed"

    - name: 📊 Collect staging metrics
      run: |
        echo "📊 Collecting staging deployment metrics..."
        
        # Performance metrics
        # Memory usage
        # Plugin compatibility
        
        echo "✅ Metrics collected"

  # =============================================================================
  # Stage 4: Production Deployment (Conditional)
  # =============================================================================
  deploy-to-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-for-deployment, deploy-to-staging]
    if: needs.pre-deployment-validation.outputs.deployment-env == 'production'
    environment: production
    steps:
    - name: 📥 Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-package-${{ github.sha:0:8 }}

    - name: ⏸️ Create maintenance window
      run: |
        echo "⏸️ Creating maintenance window..."
        
        # Notify users of maintenance
        # Set maintenance mode
        # Backup current version
        
        echo "🔧 Maintenance window created"

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        
        # Blue-green deployment logic
        # Health checks during deployment
        # Automatic rollback on failure
        
        echo "✅ Production deployment completed"

    - name: 🔍 Post-deployment verification
      run: |
        echo "🔍 Running post-deployment verification..."
        
        # Full functionality test
        # Performance regression test
        # User acceptance validation
        
        echo "✅ Post-deployment verification passed"

    - name: ✅ Complete maintenance window
      run: |
        echo "✅ Completing maintenance window..."
        
        # Remove maintenance mode
        # Update status page
        # Notify users of completion
        
        echo "🎉 Production deployment successful"

  # =============================================================================
  # Stage 5: Rollback Capability
  # =============================================================================
  prepare-rollback:
    name: 🔄 Prepare Rollback
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: always() && needs.deploy-to-production.result == 'failure'
    environment: production
    steps:
    - name: 🚨 Automatic rollback initiated
      run: |
        echo "🚨 Production deployment failed - initiating automatic rollback"
        
        # Restore previous version
        # Restart services
        # Verify rollback success
        
        echo "🔄 Automatic rollback completed"

    - name: 📢 Notify stakeholders
      run: |
        echo "📢 Notifying stakeholders of rollback..."
        # Send notifications about rollback

  # =============================================================================
  # Stage 6: Post-deployment Monitoring
  # =============================================================================
  post-deployment-monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-to-staging, deploy-to-production]
    if: always() && (needs.deploy-to-staging.result == 'success' || needs.deploy-to-production.result == 'success')
    steps:
    - name: 📊 Start monitoring dashboard
      run: |
        echo "📊 Starting post-deployment monitoring..."
        
        # Set up monitoring for next 4 hours
        # Track error rates
        # Monitor performance metrics
        
        echo "🔍 Monitoring dashboard activated"

    - name: 📈 Performance baseline
      run: |
        echo "📈 Establishing performance baseline..."
        
        # Collect baseline metrics
        # Set alerting thresholds
        # Schedule performance reports
        
        echo "📊 Performance baseline established"

  # =============================================================================
  # Stage 7: Deployment Notification
  # =============================================================================
  notify-deployment-status:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-to-staging, deploy-to-production, prepare-rollback]
    if: always()
    steps:
    - name: 📊 Generate deployment report
      run: |
        cat > deployment-report.md << EOF
        # 🚀 Deployment Report
        
        **Timestamp**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        **Environment**: ${{ needs.pre-deployment-validation.outputs.deployment-env }}
        **Git SHA**: ${{ github.sha:0:8 }}
        **Git Ref**: ${{ github.ref }}
        
        ## Deployment Status
        - **Validation**: ${{ needs.pre-deployment-validation.result }}
        - **Staging**: ${{ needs.deploy-to-staging.result }}
        - **Production**: ${{ needs.deploy-to-production.result }}
        - **Rollback**: ${{ needs.prepare-rollback.result }}
        
        ## Next Steps
        - [ ] Monitor system for 4 hours
        - [ ] Verify user functionality
        - [ ] Update documentation if needed
        
        EOF

    - name: 📧 Send success notification
      if: contains(fromJson('["success", "skipped"]'), needs.deploy-to-staging.result) && contains(fromJson('["success", "skipped"]'), needs.deploy-to-production.result)
      run: |
        echo "✅ Deployment successful - sending success notification"
        # Implement notification logic (Slack, email, etc.)

    - name: 🚨 Send failure notification
      if: contains(fromJson('["failure", "cancelled"]'), needs.deploy-to-staging.result) || contains(fromJson('["failure", "cancelled"]'), needs.deploy-to-production.result)
      run: |
        echo "❌ Deployment failed - sending failure notification"
        # Implement failure notification logic

    - name: 📋 Upload deployment report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-report-${{ github.sha:0:8 }}
        path: deployment-report.md

# =============================================================================
# Workflow Configuration
# =============================================================================
concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false  # Never cancel deployments